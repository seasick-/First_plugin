define([,  "backbone.layoutmanager",,  "io",],,,function(LayoutManager) {,  // Provide a global location to place configuration settings and module,  // creation.,  var app = {,    // The root path to run the application.,    root: (/la_secured/.test(window.location.pathname)) ? "/apps/la_secured/mobile/" : "/",,    ,    // Basic browser test,    browser: {,      mozilla: /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase()) && !/msie/.test(navigator.userAgent.toLowerCase()),,      webkit: /webkit/.test(navigator.userAgent.toLowerCase()),,      opera: /opera/.test(navigator.userAgent.toLowerCase()),,      msie: /msie/.test(navigator.userAgent.toLowerCase()),,      mobile: /mobile/.test(navigator.userAgent.toLowerCase()),,      emp: /la_secured/.test(window.location.pathname.toLowerCase()),    },,    ,    protocol: /^https?/.test(window.location.protocol) ? window.location.protocol : 'http:',,    data: {},,    socket: null,,    ,    // Get the url and clean up any leading /,    getUrl: function() {,      if (window.location.pathname) {,        var url = window.location.pathname;,        while(url.charAt(0) === '/') {,          url = url.substr(1);,        },,        return url;,      },    },,    ,    intTime: new Date().getTime(),,    ,    // Determine if the device has been put to sleep.,    // This is a hack but there's no official way to do this.,    getTime: function() {,        var intNow = new Date().getTime();,        if (intNow - app.intTime > 3000) {,          var socket = app.socket.socket;,          // See if we're disconnected or already reconnecting,          if (!socket.connected && (!socket.connecting || !socket.reconnecting)) {,            socket.reconnect();,            ,            // If we're part of a class let's rejoin,            if (app.router.user.get('classId')) {,              app.socket.emit('joinRoom', { 'id': Number(app.router.user.get('classId')) });,            },          },        },        ,        // Reset the timer,        app.intTime = intNow;,        ,        // Recurse!,        setTimeout(app.getTime,1000);,    },,    ,    get_vztube_hostname: function(){,      var deferred = $.Deferred();,      if (app.data.vztube === undefined) {,        deferred.then(function(hostname){,          app.data.vztube = hostname;,        });,        var img = document.createElement('img');,        img.onload = function(){ deferred.resolve('vztube.vzwcorp.com'); };,        img.onerror = function(){ deferred.resolve('vztube.verizonwireless.com'); };,        img.src = app.protocol + '//vztube.vzwcorp.com/images/spacer.gif?cache=' + (+new Date());,      } else {,        deferred.resolve(app.data.vztube);,      },      return deferred.promise();,    },  };,  ,  // Redirect to login on 403 from AJAX calls,  $(document).ajaxError(function(event, jqxhr, settings, exception) {,    if (jqxhr.status === 403) {,      window.location.replace('/timeout');,    },  });,  ,  ,  // Enable P2P on everything, but IE and EMP,  if (!app.browser.msie && !app.browser.emp) {,    app.socket = io.connect(window.location.hostname);,    ,    app.socket.on('p2p', function(data) {,      if (!app.browser.msie) {,        if (data.url) {,          app.router.trigger('p2p', { url: data.url });,        },      },    });,  },,  // Localize or create a new JavaScript Template object.,  var JST = window.JST = window.JST || {};,,  // Configure LayoutManager with Backbone Boilerplate defaults.,  Backbone.Layout.configure({,    // Allow LayoutManager to augment Backbone.View.prototype.,    manage: true,,,    prefix: "app/templates/",,,    fetchTemplate: function(path) {,      // Concatenate the file extension.,      path = path + ".html";,,      // If cached, use the compiled template.,      if (JST[path]) {,        return JST[path];,      },,      // Put fetch into `async-mode`.,      var done = this.async();,,      // Seek out the template asynchronously.,      $.get(app.root + path, function(contents) {,          done(JST[path] = _.template(contents));,      });,    },  });,,  // Mix Backbone.Events, modules, and layout management into the app object.,  return _.extend(app, {,    //////////////////CUSTOM//////////////////,    guidGenerator: function() {,      var S4 = function() {,        return (((1+Math.random())*0x10000)|0).toString(16).substring(1);,      };,      return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());,    },,     ,    fetchJSON: function(path) {,      // var for storing JSON Object,      var jsonObject;,            ,      // Append the file extension.,      path += ".json";,      ,      // Fetch JSON and encode,      $.ajax({,        url: "/" + path,,        dataType: "json",,        //cache: false,,        async: false,,      ,        success: function(contents) {,          jsonObject = contents;,        },,      ,        error: function(xhr, errorType, error) {,          console.log('fetchJSON XHR: ', xhr);,          console.log('fetchJSON ErrorType: ', errorType);,          console.log('fetchJSON Error: ', error);,        },      });,      ,      return jsonObject;,    },,    ////////////////END CUSTOM////////////////,        ,    // Create a custom object with a nested Views object.,    module: function(additionalProps) {,      return _.extend({ Views: {} }, additionalProps);,    },,  ,    // Helper for using layouts.,    useLayout: function(name, options) {,      // Enable variable arity by allowing the first argument to be the options,      // object and omitting the name argument.,      if (_.isObject(name)) {,        options = name;,      },      ,      // Ensure options is an object.,      options = options || {};,      ,      // If a name property was specified use that as the template.,      if (_.isString(name)) {,        options.template = name;,      },      ,      // Check if a layout already exists, and wasn't changed.,      // If so, update the template.,      if (this.layout && options.template == this.layout.template) {,        this.layout.template = options.template;,        // Also update the serialize options,        this.layout.serialize = options.serialize;,      } else {,        // Create a new Layout with options.,        this.layout = new Backbone.Layout(_.extend({,          el: "#main",        }, options));,      },      ,      // Cache the refererence.,      return this.layout;,    },  }, Backbone.Events);,,});
console.log(line: 0);
