define([  "backbone.layoutmanager",  console.log(line: 3);  "io"  console.log(line: 5);],function(LayoutManager) {  // Provide a global location to place configuration settings and module  console.log(line: 10);  // creation.  console.log(line: 12);  var app = {  console.log(line: 14);    // The root path to run the application.    console.log(line: 16);    root: (/la_secured/.test(window.location.pathname)) ? "/apps/la_secured/mobile/" : "/",    console.log(line: 18);        console.log(line: 20);    // Basic browser test    console.log(line: 22);    browser: {    console.log(line: 24);      mozilla: /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase()) && !/msie/.test(navigator.userAgent.toLowerCase()),      console.log(line: 26);      webkit: /webkit/.test(navigator.userAgent.toLowerCase()),      console.log(line: 28);      opera: /opera/.test(navigator.userAgent.toLowerCase()),      console.log(line: 30);      msie: /msie/.test(navigator.userAgent.toLowerCase()),      console.log(line: 32);      mobile: /mobile/.test(navigator.userAgent.toLowerCase()),      console.log(line: 34);      emp: /la_secured/.test(window.location.pathname.toLowerCase())      console.log(line: 36);    },    console.log(line: 38);        console.log(line: 40);    protocol: /^https?/.test(window.location.protocol) ? window.location.protocol : 'http:',    console.log(line: 42);    data: {},    console.log(line: 44);    socket: null,    console.log(line: 46);        console.log(line: 48);    // Get the url and clean up any leading /    console.log(line: 50);    getUrl: function() {    console.log(line: 52);      if (window.location.pathname) {      console.log(line: 54);        var url = window.location.pathname;        console.log(line: 56);        while(url.charAt(0) === '/') {        console.log(line: 58);          url = url.substr(1);          console.log(line: 60);        }        console.log(line: 62);        return url;        console.log(line: 65);      }      console.log(line: 67);    },    console.log(line: 69);        console.log(line: 71);    intTime: new Date().getTime(),    console.log(line: 73);        console.log(line: 75);    // Determine if the device has been put to sleep.    console.log(line: 77);    // This is a hack but there's no official way to do this.    console.log(line: 79);    getTime: function() {    console.log(line: 81);        var intNow = new Date().getTime();        console.log(line: 83);        if (intNow - app.intTime > 3000) {        console.log(line: 85);          var socket = app.socket.socket;          console.log(line: 87);          // See if we're disconnected or already reconnecting          console.log(line: 89);          if (!socket.connected && (!socket.connecting || !socket.reconnecting)) {          console.log(line: 91);            socket.reconnect();            console.log(line: 93);                        console.log(line: 95);            // If we're part of a class let's rejoin            console.log(line: 97);            if (app.router.user.get('classId')) {            console.log(line: 99);              app.socket.emit('joinRoom', { 'id': Number(app.router.user.get('classId')) });              console.log(line: 101);            }            console.log(line: 103);          }          console.log(line: 105);        }        console.log(line: 107);                console.log(line: 109);        // Reset the timer        console.log(line: 111);        app.intTime = intNow;        console.log(line: 113);                console.log(line: 115);        // Recurse!        console.log(line: 117);        setTimeout(app.getTime,1000);        console.log(line: 119);    },    console.log(line: 121);        console.log(line: 123);    get_vztube_hostname: function(){    console.log(line: 125);      var deferred = $.Deferred();      console.log(line: 127);      if (app.data.vztube === undefined) {      console.log(line: 129);        deferred.then(function(hostname){        console.log(line: 131);          app.data.vztube = hostname;          console.log(line: 133);        });        console.log(line: 135);        var img = document.createElement('img');        console.log(line: 137);        img.onload = function(){ deferred.resolve('vztube.vzwcorp.com'); };        console.log(line: 139);        img.onerror = function(){ deferred.resolve('vztube.verizonwireless.com'); };        console.log(line: 141);        img.src = app.protocol + '//vztube.vzwcorp.com/images/spacer.gif?cache=' + (+new Date());        console.log(line: 143);      } else {      console.log(line: 145);        deferred.resolve(app.data.vztube);        console.log(line: 147);      }      console.log(line: 149);      return deferred.promise();      console.log(line: 151);    }    console.log(line: 153);  };  console.log(line: 155);    console.log(line: 157);  // Redirect to login on 403 from AJAX calls  console.log(line: 159);  $(document).ajaxError(function(event, jqxhr, settings, exception) {  console.log(line: 161);    if (jqxhr.status === 403) {    console.log(line: 163);      window.location.replace('/timeout');      console.log(line: 165);    }    console.log(line: 167);  });  console.log(line: 169);    console.log(line: 171);    console.log(line: 173);  // Enable P2P on everything, but IE and EMP  console.log(line: 175);  if (!app.browser.msie && !app.browser.emp) {  console.log(line: 177);    app.socket = io.connect(window.location.hostname);    console.log(line: 179);        console.log(line: 181);    app.socket.on('p2p', function(data) {    console.log(line: 183);      if (!app.browser.msie) {      console.log(line: 185);        if (data.url) {        console.log(line: 187);          app.router.trigger('p2p', { url: data.url });          console.log(line: 189);        }        console.log(line: 191);      }      console.log(line: 193);    });    console.log(line: 195);  }  console.log(line: 197);  // Localize or create a new JavaScript Template object.  console.log(line: 200);  var JST = window.JST = window.JST || {};  console.log(line: 202);  // Configure LayoutManager with Backbone Boilerplate defaults.  console.log(line: 205);  Backbone.Layout.configure({  console.log(line: 207);    // Allow LayoutManager to augment Backbone.View.prototype.    console.log(line: 209);    manage: true,    console.log(line: 211);    prefix: "app/templates/",    console.log(line: 214);    fetchTemplate: function(path) {    console.log(line: 217);      // Concatenate the file extension.      console.log(line: 219);      path = path + ".html";      console.log(line: 221);      // If cached, use the compiled template.      console.log(line: 224);      if (JST[path]) {      console.log(line: 226);        return JST[path];        console.log(line: 228);      }      console.log(line: 230);      // Put fetch into `async-mode`.      console.log(line: 233);      var done = this.async();      console.log(line: 235);      // Seek out the template asynchronously.      console.log(line: 238);      $.get(app.root + path, function(contents) {      console.log(line: 240);          done(JST[path] = _.template(contents));          console.log(line: 242);      });      console.log(line: 244);    }    console.log(line: 246);  });  console.log(line: 248);  // Mix Backbone.Events, modules, and layout management into the app object.  console.log(line: 251);  return _.extend(app, {  console.log(line: 253);    //////////////////CUSTOM//////////////////    console.log(line: 255);    guidGenerator: function() {    console.log(line: 257);      var S4 = function() {      console.log(line: 259);        return (((1+Math.random())*0x10000)|0).toString(16).substring(1);        console.log(line: 261);      };      console.log(line: 263);      return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());      console.log(line: 265);    },    console.log(line: 267);          console.log(line: 269);    fetchJSON: function(path) {    console.log(line: 271);      // var for storing JSON Object      console.log(line: 273);      var jsonObject;      console.log(line: 275);                        console.log(line: 277);      // Append the file extension.      console.log(line: 279);      path += ".json";      console.log(line: 281);            console.log(line: 283);      // Fetch JSON and encode      console.log(line: 285);      $.ajax({      console.log(line: 287);        url: "/" + path,        console.log(line: 289);        dataType: "json",        console.log(line: 291);        //cache: false,        console.log(line: 293);        async: false,        console.log(line: 295);            console.log(line: 297);        success: function(contents) {        console.log(line: 299);          jsonObject = contents;          console.log(line: 301);        },        console.log(line: 303);            console.log(line: 305);        error: function(xhr, errorType, error) {        console.log(line: 307);          console.log('fetchJSON XHR: ', xhr);          console.log(line: 309);          console.log('fetchJSON ErrorType: ', errorType);          console.log(line: 311);          console.log('fetchJSON Error: ', error);          console.log(line: 313);        }        console.log(line: 315);      });      console.log(line: 317);            console.log(line: 319);      return jsonObject;      console.log(line: 321);    },    console.log(line: 323);    ////////////////END CUSTOM////////////////    console.log(line: 325);                console.log(line: 327);    // Create a custom object with a nested Views object.    console.log(line: 329);    module: function(additionalProps) {    console.log(line: 331);      return _.extend({ Views: {} }, additionalProps);      console.log(line: 333);    },    console.log(line: 335);    console.log(line: 337);    // Helper for using layouts.    console.log(line: 339);    useLayout: function(name, options) {    console.log(line: 341);      // Enable variable arity by allowing the first argument to be the options      console.log(line: 343);      // object and omitting the name argument.      console.log(line: 345);      if (_.isObject(name)) {      console.log(line: 347);        options = name;        console.log(line: 349);      }      console.log(line: 351);            console.log(line: 353);      // Ensure options is an object.      console.log(line: 355);      options = options || {};      console.log(line: 357);            console.log(line: 359);      // If a name property was specified use that as the template.      console.log(line: 361);      if (_.isString(name)) {      console.log(line: 363);        options.template = name;        console.log(line: 365);      }      console.log(line: 367);            console.log(line: 369);      // Check if a layout already exists, and wasn't changed.      console.log(line: 371);      // If so, update the template.      console.log(line: 373);      if (this.layout && options.template == this.layout.template) {      console.log(line: 375);        this.layout.template = options.template;        console.log(line: 377);        // Also update the serialize options        console.log(line: 379);        this.layout.serialize = options.serialize;        console.log(line: 381);      } else {      console.log(line: 383);        // Create a new Layout with options.        console.log(line: 385);        this.layout = new Backbone.Layout(_.extend({        console.log(line: 387);          el: "#main"          console.log(line: 389);        }, options));        console.log(line: 391);      }      console.log(line: 393);            console.log(line: 395);      // Cache the refererence.      console.log(line: 397);      return this.layout;      console.log(line: 399);    }    console.log(line: 401);  }, Backbone.Events);  console.log(line: 403);});
console.log(line: 0);
