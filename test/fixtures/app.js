define([  // Application.  'app',  // Modules  'modules/init',  'modules/user/user',  'modules/nav/album',  'modules/nav/section',  'modules/nav/module',  'modules/nav/page',  'modules/hub/header',  'modules/hub/content',  'modules/class/access',  'modules/class/class',  'modules/class/user',  'modules/class/roster',  'modules/notebook/notebook',  'modules/hub/plugins/bookmark',  'modules/hub/plugins/input',  'modules/hub/plugins/knowledgeCheck',  'modules/hub/plugins/highlight',  // Plugins  'backbone.routefilter'],function(app, Init, User, Album, Section, Module, Page, HubHeader, HubContent, AlbumAccess, Class, ClassUser, ClassRoster, Notebook, Bookmark, Input, KnowledgeCheck, Highlight) {  // Defining the application router, you can attach sub routers here.  var Router = Backbone.Router.extend({    /**     * Initialization     *     * This will setup any of our default variables and our layout.     * This will also extend app.router with these values.     */    initialize: function() {      var self = this;      // Setup defaults to extend router with      var defaults = {        layout: null,        // User        user: new User.Model(),        // Classes        accessCollection: new AlbumAccess.Collection(),        classCollection: new Class.Collection(),        classUserCollection: new ClassUser.Collection(),        classRosterCollection: new ClassRoster.Collection(),        // Content        albumCollection: new Album.Collection(),        sectionCollection: new Section.Collection(),        moduleCollection: new Module.Collection(),        pageCollection: new Page.Collection(),        // Notes        customNotes: null,        collapseNotes: null,        leaderNotes: null,        // Notebook        notebookCollection: new Notebook.Collection(),        // Plugins        bookmarkCollection: new Bookmark.Collection(),        inputCollection: new Input.Collection(),        knowledgeCheckCollection: new KnowledgeCheck.Collection(),        highlightCollection : new Highlight.Collection(),        // Navigation        albumPath: null,        currentAlbum: {},        currentSection: {},        currentModule: {},        currentPage: {},        sectionPosition: null,        modulePosition: null,        pagePosition: null,        nextPageUrl: null,        prevPageUrl: null,        // Helpers        isSyncing: false,        disableNav: false      };      // Ensure the router has references to these defaults      _.extend(this, defaults);      this.listenTo(this.pageCollection, 'request', function() {        this.isSyncing = true;      });      this.listenTo(this.pageCollection, 'sync', function() {        this.isSyncing = false;      });      // Set Google Analytics to track Backbone Events      if (/^(four.|mobile.)?learningalbum.vzw.com$/.test(window.location.hostname)) {        this.bind('all', this._trackPageview);      }    },    /**     * Routes     *     * The name of the routes we'll be using and their affiliated methods.     */    routes: {      '': 'class',      'notebook/:albumPath': 'notebook',      ':albumPath/section/:sectionPosition/module/:modulePosition': 'hubFirst',      ':albumPath/section/:sectionPosition/module/:modulePosition/last': 'hubLast',      ':albumPath/section/:sectionPosition/module/:modulePosition/page/:pagePosition': 'hubPage',      'album/:albumUUID/topic/:pageUUID': 'hubLink',      'topic/:pageUUID': 'hubLink',      ':albumPath/module/:modulePosition': 'hubFirst',      ':albumPath/module/:modulePosition/last': 'hubLast',      ':albumPath/module/:modulePosition/page/:pagePosition': 'hubPage',      // BUG: Next and Back buttons double the URL. This is a temporary fix.      'apps/la_secured/mobile/:albumPath/section/:sectionPosition/module/:modulePosition': 'hubFirst',      'apps/la_secured/mobile/:albumPath/section/:sectionPosition/module/:modulePosition/last': 'hubLast',      'apps/la_secured/mobile/:albumPath/section/:sectionPosition/module/:modulePosition/page/:pagePosition': 'hubPage'    },    /**     * Class Route     *     * This is the default route within the album.     */    class: function() {      // Setup the layout if needed      if (!this.layout || this.layout.options.template !== 'layouts/class') {       this.layout = app.useLayout('layouts/class');      }      this.layout.setViews({        '.navigation': new Class.Views.Nav()      });      this.layout.render().promise().then(function() {        $('body').css({'padding-top': '0' , 'background-color': '#1a1a1a' });      });    },    /**     * /album/module/X || /album/section/X/module/X View     *     * This route is responsible for handling the first page of a module.     * It will determine if the album has an overview and display that,     * otherwise display first page.     *     * @param {String} albumPath - The name of the album sent to the route.     * @param {Number} modulePosition - The position of the module in the album.     */    hubFirst: function(albumPath, sectionPosition, modulePosition) {      var self = this;      if (!modulePosition) {        modulePosition = Number(sectionPosition);        sectionPosition = 1;      }      self.setNavigation({        albumPath: self.albumPath,        sectionPosition: self.sectionPosition,        modulePosition: modulePosition,        pageRoute: 'first'      }, function() {        // Render Hub        self.hub(self.albumPath, self.sectionPosition, modulePosition, null);      });    },    /**     * /album/module/X/last || /album/section/X/module/X/last View     *     * This route is responsible for handling the last page of a module.     * It will determine the last page of the previous module (if it exists),     * and display the page.     *     * @param {String} albumPath - The name of the album sent to the route.     * @param {Number} sectionPosition - The position of the section in the album.     * @param {Number} modulePosition - The position of the module in the album.     */    hubLast: function(albumPath, sectionPosition, modulePosition) {      var self = this;      if (!modulePosition) {        modulePosition = Number(sectionPosition);        sectionPosition = 1;      }      self.setNavigation({        albumPath: self.albumPath,        sectionPosition: self.sectionPosition,        modulePosition: modulePosition,        pageRoute: 'last'       }, function() {        // Render Hub        self.hub(self.albumPath, self.sectionPosition, modulePosition, null);      });    },    /**     * /album/:albumUUID/topic/:topicUUID || /topic/:topicUUID View     *     * This route is responsible for direct links using ideally album and topic UUID,     * but also supports only the topic (which has issues if its linked elsewhere).     *     * @param {String} albumUUID - Optional. The UUID of the album.     * @param {String} pageUUID - The UUID of the album.     * @param {Number} modulePosition - The position of the module in the album.     */    hubLink: function(albumUUID, pageUUID) {      var self = this;      // If only one param exists, its the pageUUID.      if (!pageUUID) {        pageUUID = albumUUID;        albumUUID = null;      }      $.get('/api/pages/link', { albumUUID: albumUUID, pageUUID: pageUUID })      .done(function(albumData) {        var data = albumData[0];        // Set our new pathing variables        app.router.albumPath = data.albumPath;        app.router.sectionPosition = data.sectionPosition;        app.router.modulePosition = data.modulePosition;        app.router.pagePosition = data.pagePosition;        self.setNavigation({          albumPath: data.albumPath,          sectionPosition: data.sectionPosition,          modulePosition: data.modulePosition,          pagePosition: data.pagePosition,          pageRoute: 'middle'         }, function() {          // Render Hub          self.hub(data.albumPath, data.sectionPosition, data.modulePosition, data.pagePosition);        });      });    },    /**     * /album/module/X/page/X View     *     * This route is responsible for handling the majority of pages for a module.     *     * @param {String} albumPath - The name of the album sent to the route.     * @param {Number} modulePosition - The position of the module in the album.     * @param {Number} pagePosition - The position of the page in the module.     */    hubPage: function(albumPath, sectionPosition, modulePosition, pagePosition) {      var self = this,          pageRoute = 'middle';      if (!pagePosition) {        modulePosition = Number(sectionPosition);        sectionPosition = 1;      }      if (!pagePosition || pagePosition.toLowerCase() === 'null') {        app.router.navigate(albumPath+'section/'+sectionPosition+'/module/'+modulePosition, { trigger: true });        return;      }      self.setNavigation({        albumPath: self.albumPath,        sectionPosition: self.sectionPosition,        modulePosition: modulePosition,        pagePosition: pagePosition,        pageRoute: pageRoute      }, function() {        // Render Hub        self.hub(albumPath, sectionPosition, modulePosition, pagePosition);      });    },    /**     * Hub Route     *     * Basis for all courses. Used once entering a class or other album.     *     * @param {String} albumPath - The name of the album sent to the route.     * @param {Number} modulePosition - The position of the module in the album.     * @param {Number} pagePosition - The position of the page in the module.     */    hub: function(albumPath, sectionPosition, modulePosition, pagePosition) {      var self = this;      if (albumPath === 'learning-album-delivery-help-participant') {        // Setup the layout if needed        if (!self.layout || self.layout.options.template !== 'layouts/hub') {         self.layout = app.useLayout('layouts/hub');        }        // Set the views in the layout        self.layout.setViews({          '.header': new HubHeader.Views.Main({ showMonitor: false, selectedParticipant: null }),          '.content': new HubContent.Views.Main({ showMonitor: false, selectedParticipant: null })        });        // Render and run any css needed        self.layout.render().promise().then(function() {          $('body').css({ 'background-color': '#fff', 'padding-top': '0px' });          app.router.trigger('page:change');        });      } else {        app.router.classCollection.findById(self.user.get('classId'), function(foundClass) {          // Class Authentication          var recentClassAlbumId = null,              currentClassAlbumId = null;          if (foundClass) {            recentClassAlbumId = foundClass.get('albumId');          }          currentClassAlbumId = self.albumCollection.findWhere({ 'path': albumPath }).get('guid');          if (recentClassAlbumId === currentClassAlbumId || self.user.get('classId') === 0) {            // Don't fetch a roster if we're in prep            if (self.user.get('classId') !== 0) {              // Fetch the class roster              if (self.classRosterCollection.where({ classId: self.user.get('classId') }).length <= 0) {                self.classRosterCollection.fetch({                  data: {                    classIds: [self.user.get('classId')]                  }                });              }            }            // Setup the layout if needed            if (!self.layout || self.layout.options.template !== 'layouts/hub') {             self.layout = app.useLayout('layouts/hub');            }            // Join the class on socket.io if we're not in prep            if (app.socket && Number(self.user.get('classId')) !== 0) {              app.socket.emit('joinRoom', { 'id': Number(self.user.get('classId')) });            }            var showMonitor = false;            var selectedParticipant = null;            // Toggle off the class monitor on page change            // until we can setup persistence.            if (self.layout && self.layout.getView('#monitor')) {              showMonitor = true;              _.each(self.layout.getView('#monitor').views.select, function(participant) {                if (participant.el.selected === true) {                  selectedParticipant = participant.$el.attr('data-user');                }              });            }            // Set the views in the layout            self.layout.setViews({              '.header': new HubHeader.Views.Main({ showMonitor: showMonitor, selectedParticipant: selectedParticipant }),              '.content': new HubContent.Views.Main({ showMonitor: showMonitor, selectedParticipant: selectedParticipant })            });            // Render and run any css needed            self.layout.render().promise().then(function() {              $('body').css({ 'background-color': '#fff', 'padding-top': '0px' });              app.router.trigger('page:change');            });          } else {            self.navigate('', { trigger: true });          }        });      }    },    /**    * Notebook Route    *    * Load notebook view for specified album    *    * @param {String} albumPath - The name of the album sent to the route.    */    notebook: function(albumPath) {      var self = this;      this.layout = app.useLayout('layouts/notebook');      this.layout.setViews({        '.header': new HubHeader.Views.NotebookHeader(),        '.content': new Notebook.Views.Main({ albumName: albumPath })      });      this.layout.render().promise().then(function() {        $('body').css({ 'background-color': '#fff' });      });    },    /**     * Before Filter.     *     * This code is run before any route. Mainly for initialization and     * bootstrapping the application.     *     * @param {String} route The url sent to the router     * @param {Object} params Parameters sent to the router via the URL     */    before: function(route, params) {      var self = this,          albumPath = params[0] || null,          sectionPosition = Number(params[1]) || null,          modulePosition = Number(params[2]) || null,          pagePosition = Number(params[3]) || null;      // Set our new pathing variables      this.albumPath = albumPath || null;      this.sectionPosition = sectionPosition || 1;      this.modulePosition = modulePosition || null;      this.pagePosition = pagePosition || null;      // Migrate from 4.0      if (_.indexOf(['retail-one-section-1', 'retail-one-section-2', 'retail-one-section-3'], params[0]) !== -1) {        this.albumPath = 'retail-new-hire';        this.sectionPosition = params[0].substr(params[0].length - 1);        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'earn-the-right') {        this.albumPath = 'retail-new-hire';        this.sectionPosition = 4;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'virtual-retail-one-section-2') {        this.albumPath = 'retail-new-hire';        this.sectionPosition = 5;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (_.indexOf(['b2b-new-emp-1', 'b2b-new-emp-2', 'b2b-new-emp-3', 'b2b-new-emp-4'], params[0], true) !== -1) {        this.albumPath = 'b2b-new-employee-training';        this.sectionPosition = params[0].substr(params[0].length - 1);        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'data-sales-essentials' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'data-sales-essentials';        this.sectionPosition = 1;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'data-sales-m2m-workshop' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'data-sales-m2m-workshop';        this.sectionPosition = 2;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'new-store-design' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'new-smart-store-design';        this.sectionPosition = 1;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'new-store-design' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'new-smart-store-design';        this.sectionPosition = 1;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'tech-for-future' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'technology-for-the-future';        this.sectionPosition = 1;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      if (params[0] === 'national-retail' && route === ':albumPath/module/:modulePosition/page/:pagePosition') {        this.albumPath = 'national-retail-training-program';        this.sectionPosition = 1;        app.router.navigate(this.albumPath+'/section/'+this.sectionPosition+'/module/'+params[1], { trigger: true, replace: true });      }      // See if the app is already bootstrapped      if (this.user.isNew()) {        Init.Bootstrap();      }    },    /**     * After Initialization     *     * This function is called within modules to make sure     * the user is set before the code is run. Mainly used     * for things like fetching other collections that require     * the user ID.     *     * @param {function} callback The function to be called after the user is set     */    afterInit: function(callback) {      if (!this.user.isNew()) {        if (callback) callback();      } else {        this.on('bootstrapped', function() {          if (callback) callback();        });      }    },    /**     * Set Navigation     *     * Given the route parameters, checks to see if the correct     * album, section, module, page models are fetched. If not, go to the     * server and fetch them.     *     * @param {Object} route - Contains backbone route data and some metadata     */    setNavigation: function(route, callback) {      var self = this,          previousSection = null,          nextSection = null,          previousLastModulePosition = null;      // Make sure all our route variables are defined      route = {        albumPath: route.albumPath || null,        sectionPosition: route.sectionPosition || 1,        modulePosition: route.modulePosition || null,        pagePosition: route.pagePosition || null,        pageRoute: route.pageRoute || null      };      // Returns true if the current module has an overview      var hasOverview = function() {        if(app.router.pageCollection.where({          moduleId: app.router.currentModule.get('guid'),          isOverview: 1        }).length > 0) {          return true;        }        return false;      };      // Get album      app.router.albumCollection.getByPath(route.albumPath, function(album) {        // Set album defaults        self.currentAlbum = album;        // Trigger album change        app.router.trigger('album:change');        // Get section        app.router.sectionCollection.getByPosition(album.toJSON(), route.sectionPosition, function(section) {          self.currentSection = section;          self.sectionPosition = Number(route.sectionPosition);          // Make sure section was found          if (!section) {            var sectionLength = Number(app.router.sectionCollection.where({ 'albumId': album.get('guid') }).length),                sectionPosition = Number(route.sectionPosition);            if (sectionPosition > sectionLength) {              app.router.navigate(album.get('path')+'/section/'+sectionLength+'/module/1', { trigger: true });              return;            }            if (sectionPosition <= 0) {              app.router.navigate(album.get('path')+'/section/1/module/1', { trigger: true });              return;            }          }          // Trigger section change          app.router.trigger('section:change');          // Get module          app.router.moduleCollection.getByPosition(album.toJSON(), section.toJSON(), route.modulePosition, function(module) {            // Set module defaults            self.currentModule = module;            self.modulePosition = Number(route.modulePosition);            // Make sure module was found            if (!module) {              var moduleLength = Number(app.router.moduleCollection.where({ 'albumId': album.get('guid') }).length),                  modulePosition = Number(route.modulePosition);              if (modulePosition > moduleLength) {                app.router.navigate(album.get('path')+'/section/1/module/'+moduleLength, { trigger: true });                return;              }              if (modulePosition <= 0 || module === undefined) {                console.log('MODULE UNDEFINED !!!!');                app.router.navigate(album.get('path')+'/section/1/module/1', { trigger: true });                return;              }            }            // Trigger module change            app.router.trigger('module:change');            // Get Page            app.router.pageCollection.getByPosition(album.toJSON(), module.toJSON(), route.pagePosition, function(page) {              if (page === undefined) {                console.log('page undefined!!!!!', page);                app.router.navigate(album.get('path')+'/section/1/module/1', { trigger: true });              } else {                // Set page defaults                self.currentPage = page;                self.pagePosition = Number(route.pagePosition);                // Trigger page change                app.router.trigger('page:change');                /**                 * Page Length                 *                 * Set the length of the page collection. Remove Prep and                 * Overview so that the position of pages matches the length.                 */                var pageLength = app.router.pageCollection.length;                if (app.router.pageCollection.where({ 'isOverview': 1, 'moduleId': app.router.currentModule.get('guid') }).length > 0) {                  pageLength = pageLength - 1;                }                if (app.router.pageCollection.where({ 'isPrep': 1, 'moduleId': app.router.currentModule.get('guid') }).length > 0) {                  pageLength = pageLength - 1;                }                // Exit out if things aren't right                if (app.router.currentPage.get('position') > pageLength || app.router.currentPage.get('position') <= 0) {                  this.pagePosition = pageLength;                  return;                }                /**                * First Page Nav                *                * If we're on the first page we'll need to make sure we link the previous button                * to the last module (if exists) and the next button to the next page (if exists).                */                if (route.pageRoute === 'first') {                  // Has Overview?                  if (hasOverview()) {                    self.pagePosition = 'overview';                    self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/1';                  } else {                    // No Overview                    self.pagePosition = 1;                    if ((pageLength + 1) > pageLength) {                      self.nextPageUrl = self._getNextModule();                    } else {                      self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/'+(self.pagePosition+1);                    }                  }                  // Set prev page url for previous module or section                  self.prevPageUrl = self._getPreviousModule();                  if (callback) callback();                  return;                } // first                /**                * Middle Page Nav                *                * If we're on the middle pages we'll need to make sure we link the previous button                * to the last page (or overview) and the next button to the next page (if exists).                */                if (route.pageRoute === 'middle') {                  if (!app.router.pagePosition) {                    if (app.router.currentPage.get('isOverview') >= 1) {                      self.prevPageUrl = self._getPreviousModule();                      self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/1';                    }                    if (app.router.currentPage.get('isPrep') >= 1) {                      self.prevPageUrl = self._getPreviousModule();                      self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition;                    }                  } else if (Number(app.router.pagePosition) === 1) {                    if (Number(app.router.pagePosition) >= pageLength) {                      self.nextPageUrl = self._getNextModule();                    } else {                      self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/'+(app.router.currentPage.get('position') + 1);                    }                    // Has Overview?                    if (hasOverview()) {                      self.prevPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition;                    } else {                      self.prevPageUrl = self._getPreviousModule();                    }                  } else {                    if (Number(app.router.pagePosition >= pageLength)) {                      self.nextPageUrl = self._getNextModule();                    } else {                      self.nextPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/'+(app.router.currentPage.get('position') + 1);                    }                    self.prevPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/'+ (app.router.currentPage.get('position') - 1);                  }                  if (callback) callback();                  return;                } // middle                /**                * Last Page Nav                *                * If we're on the last page (by route or pageLength) we'll need to make sure we link the previous button                * to the last page and the next button to the next module or section (if exists).                */                if (route.pageRoute === 'last' || route.modulePosition >= pageLength) {                  route.pagePosition = pageLength;                  self.pagePosition = pageLength;                  self.currentPage = app.router.pageCollection.findWhere({ moduleId: module.get('guid'), position: route.pagePosition });                  self.nextPageUrl = self._getNextModule();                  if (pageLength === 1 || (pageLength-1) <= 0) {                    // Has Overview?                    if (hasOverview()) {                      self.prevPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition;                    } else {                      self.prevPageUrl = self._getPreviousModule();                    }                  } else {                    self.prevPageUrl = app.root+self.albumPath+'/section/'+self.sectionPosition+'/module/'+self.modulePosition+'/page/'+(pageLength - 1);                  }                  if (callback) callback();                  return;                } // last                // Send Callback                if (callback) callback();              }            });          });        });      });    },    /**     * Get Previous Module     *     * Returns the previous Module or Section of the currently loaded     * album, module and page.     *     * @return {String} The previous page url or 'disabled' if     * no page found.     */    _getPreviousModule: function() {      var previousLastModulePosition = null;      // See if there's a previous module      if (app.router.moduleCollection.where({        sectionUUID: app.router.currentSection.get('guid'),        position: (app.router.modulePosition - 1)      }).length > 0) {        return app.root+this.albumPath+'/section/'+app.router.sectionPosition+'/module/'+(app.router.modulePosition - 1)+'/last';      } else {        var previousSection = app.router.albumCollection.getPreviousSection();        if (previousSection) {          previousLastModulePosition = app.router.moduleCollection.where({            sectionUUID: previousSection.get('guid')          }).length;          return app.root+app.router.currentAlbum.get('path')+'/section/'+(Number(app.router.sectionPosition)-1)+'/module/'+previousLastModulePosition+'/last';        } else {          return 'disabled';        }      }    },    /**     * Get Next Module     *     * Returns the next Module or Section of the currently loaded     * album, module and page.     *     * @return {String} The next page url or 'disabled' if     * no page found.     */    _getNextModule: function() {      // See if there's a next module      if (app.router.moduleCollection.where({        sectionUUID: app.router.currentSection.get('guid'),        position: (app.router.modulePosition + 1)      }).length > 0) {        return app.root+this.albumPath+'/section/'+this.sectionPosition+'/module/'+(this.modulePosition + 1);      } else {        var nextSection = app.router.albumCollection.getNextSection();        if (nextSection) {          return app.root+app.router.currentAlbum.get('path')+'/section/'+Number(nextSection.get('position'))+'/module/1';        } else {          return 'disabled';        }      }    },    /**     * Analytics Helper     *     * Push any history changes to Google Analytics.     */    _trackPageview: function() {      var self = this;      var url = Backbone.history.getFragment();      this.afterInit(function() {        if (self.user.get('classId') !== undefined) {          self.user.hasAccess(function(access) {              var hostEnvironment = window.location.hostname.split(".")[0];              // gaq push parameter syntax for custom vars:              // 1: "_setCustomVar", tell gaq where to push. (required)              // 2: custom var index, 1-5 (required).              // 3: name of custom va. (required).              // 4: scope of variable. (optional)              // see gaq docs for more info              // custom vars:              // 1: Class Id              // 2: isTrainer              // 3: Environment              // 4: undefined              // 5: undefined              _gaq.push( ['_setCustomVar', 1, "ClassId", self.user.get("classId"), 2] );              _gaq.push( ['_setCustomVar', 2, "isTrainer", access ? 1 : 0, 2] );              _gaq.push( ['_setCustomVar', 3, "Environment", hostEnvironment, 2] );              return _gaq.push(['_trackPageview', "/" + url]);          });        } else {          // catch all.          return _gaq.push(['_trackPageview', "/" + url]);        }      });    }  });  return Router;});